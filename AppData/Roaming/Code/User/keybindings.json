[
	//> Main bindings

	//< List vim like controls
	{
		"key": "j",
		"command": "list.focusDown",
		"when": "listFocus && !inputFocus"
	},

	//todo check if in toggleKeyboardNavigation for list nav currently still c-p/n
	{
		"key": "h",
		"command": "list.collapse",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "o",
		"command": "list.toggleExpand",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "shift+h",
		"command": "list.collapseAll",
		"when": "listFocus && !editorTextFocus && !inputFocus"
	},
	{
		"key": "l",
		"command": "list.toggleSelection",
		"when": "listFocus && !inputFocus"
	},

	// Nav for problems and ?? don't forget this time... ffs
	{
		"key": "ctrl+j",
		"command": "list.focusPageDown",
		"when": "!explorerViewletFocus && listFocus && !inputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "list.focusPageUp",
		"when": "!explorerViewletFocus && listFocus && !inputFocus"
	},

	{
		"key": "k",
		"command": "list.focusUp",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "ctrl+shift+z",
		"command": "workbench.action.toggleZenMode"
	},
	{
		"key": "ctrl+shift+/",
		"command": "editor.action.blockComment",
		"when": "editorTextFocus && !editorReadonly"
	},

	{
		"key": "ctrl+shift+n",
		"command": "settings.cycle.fontSize",
		"when": "editorTextFocus && !editorReadonly"
	},

	// {
	//   "key": "ctrl+shift+n",
	//   "command": "settings.cycle.lineNumber",
	//   "when": "editorTextFocus && !editorReadonly"
	// },

	{
		"key": "ctrl+b",
		"command": "workbench.action.toggleSidebarVisibility"
	},
	{
		"key": "shift+escape",
		"command": "notifications.clearAll"
	},
	{
		"key": "ctrl+alt+w",
		"command": "workbench.action.closeEditorsInGroup",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "escape",
		"command": "refactorPreview.discard",
		"when": "refactorPreview.active"
	},

	//note This is a catch all to get back into editor when odd focus don't delete...
	{
		"key": "ctrl+k ctrl+k",
		"command": "workbench.action.navigateLast",
		"when": "!terminalFocus || !editorFocus || !terminalEditorFocus"
	},
	// {
	//   "key": ";",
	//   "command": "removeSecondaryCursors",
	//   "when": "editorHasMultipleSelections"
	// },

	{
		"key": "ctrl+6",
		"command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
	},
	{
		"key": "ctrl+6",
		"command": "workbench.action.quickOpenNavigateNextInEditorPicker",
		"when": "inEditorsPicker && inQuickOpen"
	},
	{
		"key": "ctrl+shift+6",
		"command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
		"when": "inEditorsPicker && inQuickOpen"
	},

	/* {
    "key": "ctrl+a",
    "command": "cursorEnd",
    "when": ""
  }, */

	//< terminal
	//todo better terminal think about same cmd for winTerm

	{
		"key": "ctrl+'",
		"command": "workbench.action.terminal.toggleTerminal"
	},
	{
		"key": "ctrl+h",
		"command": "workbench.action.terminal.focusPrevious",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+l",
		"command": "workbench.action.terminal.focusNextPane",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+j",
		"command": "workbench.action.toggleMaximizedPanel",
		"when": "panelFocus || terminalFocus"
	},
	{
		"key": "ctrl+j",
		"command": "-workbench.action.terminal.moveToTerminalPanel",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+alt+k",
		"command": "workbench.action.terminal.moveToEditor",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+alt+j",
		"command": "workbench.action.terminal.moveToTerminalPanel",
		"when": "terminalFocus"
	},
	//note: let the default take over when editor, its different f'n command...
	{
		"key": "ctrl+w",
		"command": "workbench.action.terminal.kill",
		"when": "terminalFocus && !terminalEditorFocus"
	},
	{
		"key": "ctrl+d",
		"command": "workbench.action.terminal.scrollDownPage",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+u",
		"command": "workbench.action.terminal.scrollUpPage",
		"when": "terminalFocus"
	},

	//< breadCrumbs
	{
		"key": "shift+space",
		"command": "breadcrumbs.focusAndSelect",
		"when": "neovim.mode == normal && breadcrumbsPossible"
	},
	{
		"key": "ctrl+shift+;",
		"command": "-breadcrumbs.focus",
		"when": "breadcrumbsPossible"
	},
	{
		"key": "ctrl+shift+.",
		"command": "-breadcrumbs.focusAndSelect",
		"when": "breadcrumbsPossible"
	},
	{
		"key": "ctrl+l",
		"command": "breadcrumbs.focusNext",
		"when": "breadcrumbsActive && breadcrumbsVisible"
	},
	{
		"key": "ctrl+h",
		"command": "breadcrumbs.focusPrevious",
		"when": "breadcrumbsActive && breadcrumbsVisible"
	},

	//< inputs

	//< search/replace panel
	{
		"key": "ctrl+j",
		"command": "search.focus.nextInputBox",
		"when": "inSearchEditor || searchViewletVisible"
	},
	{
		"key": "ctrl+k",
		"command": "search.focus.previousInputBox",
		"when": "inSearchEditor || searchViewletVisible"
	},

	//< explorerSideBar focus
	{
		"key": "ctrl+shift+'",
		"command": "openInTerminal",
		"when": "filesExplorerFocus"
	},
	{
		"key": "ctrl+f",
		"command": "explorer.newFolder",
		"when": "filesExplorerFocus && explorerViewletFocus"
	},
	{
		"key": "ctrl+t",
		"command": "explorer.newFile",
		"when": "filesExplorerFocus && explorerViewletFocus"
	},
	{
		"key": "ctrl+r",
		"command": "renameFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},

	//< gitSideBar
	{
		"key": "ctrl+p",
		"command": "git.push",
		"when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},
	{
		"key": "u",
		"command": "git.unstage",
		"when": "!textInputFocus && sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},
	{
		"key": "shift+u",
		"command": "git.unstageAll",
		"when": "isInDiffEditor || !textInputFocus && sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},
	{
		"key": "s",
		"command": "git.stage",
		"when": "!inputFocus && !textInputFocus && activeViewlet == 'workbench.view.scm'"
	},

	{
		"key": "ctrl+j",
		"command": "timeline.focus",
		"when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},

	//fixme can't navigate out till after first tab+shift
	{
		"key": "ctrl+j",
		"command": "workbench.scm.focus",
		"when": "!panelFocus && textInputFocus && activeViewlet == 'workbench.view.scm'"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.scm.focus",
		"when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},

	//todo check to see if can use out of panel for last editor
	// "command": "workbench.action.focusNextPart",
	// "command": "workbench.action.navigateLast",

	//note this would be nice for something?
	// "command": "workbench.action.focusPanel",

	//< gitDiff editor navigation
	//fixme stageChange or toggle into lens
	// {
	//   "key": "ctrl+s",
	//   "command": "git.stageChange",
	//   "when": "dirtyDiffVisible"
	// },

	{
		"key": "ctrl+d",
		"command": "editor.action.dirtydiff.next",
		"when": "dirtyDiffVisible"
	},
	{
		"key": "ctrl+u",
		"command": "editor.action.dirtydiff.previous",
		"when": "dirtyDiffVisible"
	},
	{
		"key": "ctrl+s",
		"command": "git.stageSelectedRanges",
		"when": "isInDiffEditor || dirtyDiffVisible"
	},

	{
		"key": "ctrl+r",
		"command": "git.revertSelectedRanges",
		"when": "isInDiffEditor || dirtyDiffVisible"
	},
	{
		"key": "ctrl+u",
		"command": "git.unstageSelectedRanges",
		"when": "isInDiffEditor"
	},
	{
		"key": "ctrl+d",
		"command": "workbench.action.compareEditor.nextChange",
		"when": "isInDiffEditor || sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},
	{
		"key": "ctrl+u",
		"command": "workbench.action.compareEditor.previousChange",
		"when": "isInDiffEditor || sideBarFocus && activeViewlet == 'workbench.view.scm'"
	},

	//< error navigation /
	{
		"key": "ctrl+m",
		"command": "editor.action.marker.next",
		"when": "neovim.mode == normal && editorTextFocus"
	},
	//

	//< todo sideBar navigation
	{
		"key": "ctrl+shift+l",
		"command": "workbench.view.extension.todo"
	},
	{
		"key": "ctrl+k",
		"command": "todo.views.2embedded.focus",
		"when": "sideBarFocus && activeViewlet == 'workbench.view.extension.todo'"
	},
	{
		"key": "ctrl+j",
		"command": "todo.views.1files.focus",
		"when": "sideBarFocus && activeViewlet == 'workbench.view.extension.todo'"
	},

	//< cSpell navigation uses a extension to turn into quickOpen..
	{
		"key": "ctrl+.",
		"command": "keyboard-quickfix.openQuickFix",
		"when": "editorHasCodeActionsProvider && editorTextFocus"
	},
	{
		"key": "ctrl+.",
		"command": "keyboard-quickfix.openQuickFix",
		"when": "isInDiffEditor"
	},

	//< navigation windows/terminal/sidebar
	{
		"key": "ctrl+alt+l",
		"command": "workbench.action.moveEditorToNextGroup",
		"when": "neovim.mode != insert && editorFocus || terminalEditorFocus"
	},
	{
		"key": "ctrl+alt+h",
		"command": "workbench.action.moveEditorToPreviousGroup",
		"when": "neovim.mode != insert && editorFocus || terminalEditorFocus"
	},
	{
		"key": "ctrl+alt+j",
		"command": "workbench.action.moveEditorToBelowGroup",
		"when": "neovim.mode != insert && editorFocus"
	},
	{
		"key": "ctrl+alt+k",
		"command": "workbench.action.moveEditorToAboveGroup",
		"when": "neovim.mode != insert && editorFocus"
	},

	{
		"key": "ctrl+j",
		"command": "workbench.action.navigateDown",
		"when": "neovim.mode != insert && !panelFocus && !sideBarFocus && !inReferenceSearchEditor"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.focusActiveEditorGroup",
		"when": "panelFocus || terminalFocus"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.navigateUp",
		"when": "editorFocus || terminalEditorFocus"
	},
	{
		"key": "ctrl+h",
		"command": "workbench.action.navigateLeft",
		"when": "neovim.mode != insert && editorFocus || terminalFocus"
	},
	{
		"key": "ctrl+h",
		"command": "workbench.action.focusNextPart",
		"when": "sideBarFocus && !referenceSearchVisible"
	},

	{
		"key": "ctrl+l",
		"command": "workbench.action.navigateRight",
		"when": "neovim.mode != insert && !panelFocus && !sideBarFocus && !breadcrumbsActive && !inReferenceSearchEditor"
	},

	{
		"key": "ctrl+;",
		"command": "workbench.action.showCommands",
		"when": "neovim.mode != insert"
	},
	{
		"key": "ctrl+i",
		"command": "workbench.action.navigateForward",
		"when": "neovim.mode != insert"
	},
	{
		"key": "ctrl+o",
		"command": "workbench.action.navigateBack",
		"when": "neovim.mode != insert"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
	},

	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible"
	},

	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},

	{
		"key": "ctrl+r",
		"command": "editor.action.rename",
		"when": "neovim.mode == normal && editorTextFocus || !activeEditor &&  inputFocus"
	},

	{
		"key": "ctrl+r",
		"command": "-workbench.action.quickOpenRecent",
		"when": ""
	},
	{
		"key": "ctrl+shift+r",
		"command": "workbench.action.openRecent",
		"when": ""
	},
	{
		"key": "ctrl+t",
		"command": "workbench.action.quickOpen",
		"when": "!filesExplorerFocus"
	},
	{
		"key": "ctrl+p",
		"command": "-workbench.action.quickOpen",
		"when": ""
	},

	//> peek Reference window
	{
		"key": "ctrl+j",
		"command": "togglePeekWidgetFocus",
		"when": "referenceSearchVisible && !listFocus"
	},
	{
		"key": "ctrl+j",
		"command": "workbench.action.navigateDown",
		"when": "inReferenceSearchEditor"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.focusActiveEditorGroup",
		"when": "inReferenceSearchEditor"
	},
	{
		"key": "ctrl+h",
		"command": "togglePeekWidgetFocus",
		"when": "referenceSearchVisible && listFocus"
	},
	{
		"key": "ctrl+l",
		"command": "togglePeekWidgetFocus",
		"when": "inReferenceSearchEditor && editorTextFocus"
	},

	//> NeoVim only commands

	//? Keep this override for escaping peekwindows/ect.. There is a PR but not complete..
	// {
	//   "command": "vscode-neovim.escape",
	//   "key": "Escape",
	//   "when": "editorTextFocus && neovim.init && neovim.mode == insert && parameterHintsVisible"
	// },
	// {
	//   "command": "vscode-neovim.escape",
	//   "key": "Escape",
	//   "when": "editorTextFocus && neovim.init && !filesExplorerFocus && !dirtyDiffVisible && !inReferenceSearchEditor && !referenceSearchVisible && !markersNavigationVisible && !parameterHintsVisible"
	// },

	{
		"key": ";",
		"command": "vscode-neovim.escape",
		"when": "neovim.mode == insert"
	},

	// {
	// 	"key": ";",
	// 	"command": "cursorRight",
	// 	"when": "editorHasMultipleSelections && neovim.mode == insert"
	// },
	{
		"key": "space",
		"command": "cursorRight",
		"when": "editorHasSelection && editorHasMultipleSelections && neovim.mode == insert"
	},
	{
		"command": "vscode-neovim.send",
		"key": "ctrl+c",
		"args": "<C-c>"
	},

	//fixme figure out how to take args like c-r
	// {
	//   "command": "vscode-neovim.paste-register",
	//   "key": "ctrl+p",
	//   "args": "0",
	//   "when": "editorTextFocus && neovim.mode == insert"
	// },

	{
		"key": "ctrl+w",
		"command": "-vscode-neovim.send"
	},
	{
		"key": "ctrl+o",
		"command": "-workbench.action.files.openLocalFile",
		"when": "remoteFileDialogVisible"
	},
	{
		"key": "ctrl+p",
		"command": "workbench.action.closePanel",
		"when": "panelFocus || editorFocus"
	},
	{
		"key": "ctrl+k m",
		"command": "-workbench.action.editor.changeLanguageMode",
		"when": "!notebookEditorFocused"
	},
	{
		"key": "f6",
		"command": "-workbench.action.focusNextPart"
	},
	{
		"key": "shift+f6",
		"command": "-workbench.action.focusPreviousPart"
	},
	{
		"key": "enter",
		"command": "-acceptSelectedSuggestion",
		"when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
	},
	{
		"key": "ctrl+h",
		"command": "-editor.action.startFindReplaceAction",
		"when": "editorFocus || editorIsOpen"
	}
]
